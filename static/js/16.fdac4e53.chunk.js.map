{"version":3,"sources":["AppFooter.js","components/signup/SignupAccount.js","pages/SignupPage.js"],"names":["AppFooter","history","useHistory","useTranslation","t","className","src","alt","type","label","onClick","push","messageToast","toast","severity","summary","detail","current","show","life","SignupAccount","useDispatch","useRef","recaptchaSignupUserRef","useForm","mode","control","register","handleSubmit","reset","watch","setValue","getValues","formState","errors","isDirty","isValid","isSubmitting","touchedFields","submitCount","dirtyFields","useState","signupUserDialog","setSignupUserDialog","passwordShown","setPasswordShown","resetFiels","username","password","email","onSubmitSignup","data","a","executeAsync","recaptchaSignupUserResponse","handleSignupUser","hideSignupUserDialog","signupUserDialogFooter","icon","autoFocus","ref","id","onSubmit","header","htmlFor","name","defaultValue","rules","required","minLength","pattern","render","field","onChange","value","maxLength","placeholder","style","textSecurity","WebkitTextSecurity","textAlign","disabled","sitekey","onErrored","alert","size","visible","width","modal","footer","onHide","SignupPage"],"mappings":"uLA0CeA,IAnCG,WAEd,IAAMC,EAAUC,cAEhB,EAAkBC,YAAe,UAAjC,mBAAOC,EAAP,UAEA,OACI,cAAC,WAAD,UACI,qBAAKC,UAAU,uBAAf,SACI,sBAAKA,UAAU,SAAf,UACI,qBAAKA,UAAU,kBAAf,SACI,qBAAKC,IAAI,2CAA2CC,IAAI,WAE5D,qBAAKF,UAAU,kBAAf,SACI,sBAAKA,UAAU,qBAAf,UACI,6BAAKD,EAAE,uBACP,+BACI,6BAAI,cAAC,SAAD,CAAQC,UAAU,SAAlB,SAA2B,mBAAGA,UAAU,uBAC5C,6BAAI,cAAC,SAAD,CAAQA,UAAU,SAAlB,SAA2B,mBAAGA,UAAU,6BAIxD,sBAAKA,UAAU,kBAAf,UACI,6BAAKD,EAAE,uBACP,+BACI,6BAAI,cAAC,SAAD,CAAQI,KAAK,SAASC,MAAOL,EAAE,wBAAyBC,UAAU,SAASK,QAAS,WAAQT,EAAQU,KAAK,UAC7G,6BAAI,cAAC,SAAD,CAAQH,KAAK,SAASC,MAAOL,EAAE,wBAAyBC,UAAU,SAASK,QAAS,WAAQT,EAAQU,KAAK,8B,0LClBnIC,EAAe,SAACC,EAAOC,EAAUC,EAASC,GAC5CH,EAAMI,QAAQC,KAAK,CAAEJ,SAAUA,EAAUC,QAASA,EAASC,OAAQA,EAAQG,KAAM,OAqMtEC,EAlMO,WAEDC,cACDnB,cADhB,IAEA,EAAkBC,YAAe,UAAjC,mBAAOC,EAAP,KACMS,GADN,KACcS,iBAAO,OACfC,EAAyBD,mBAG/B,EAUME,YAAQ,CAAEC,KAAM,aARlBC,GAFJ,EACIC,SADJ,EAEID,SACAE,EAHJ,EAGIA,aACAC,EAJJ,EAIIA,MAJJ,KAKIC,MALJ,EAMIC,SANJ,EAOIC,UAPJ,EASIC,WAAaC,EATjB,EASiBA,OAAQC,EATzB,EASyBA,QAASC,EATlC,EASkCA,QAIlC,GAbA,EAS2CC,aAT3C,EASyDC,cATzD,EASwEC,YATxE,EASqFC,YAIrCC,oBAAS,IAAzD,mBAAOC,EAAP,KAAyBC,EAAzB,KACA,EAA0CF,oBAAS,GAAnD,mBAAOG,EAAP,KAAsBC,EAAtB,KAUMC,EAAa,WACfvB,EAAuBN,QAAQY,QAC/BA,EAAM,CAAEkB,SAAU,GAAIC,SAAU,GAAIC,MAAO,MAKzCC,EAAc,uCAAG,WAAOC,GAAP,eAAAC,EAAA,sEACuB7B,EAAuBN,QAAQoC,eADtD,OACbC,EADa,OAEnBC,EAAiBD,EAA6BH,GAF3B,2CAAH,sDAKdI,EAAgB,uCAAG,WAAOD,EAA6BH,GAApC,SAAAC,EAAA,sDACrBxC,EAAaC,EAAO,UAAR,UAAsBT,EAAE,yCAAxB,UAAsEA,EAAE,0CACpFuC,GAAoB,GACpBG,IAHqB,2CAAH,wDAUhBU,EAAuB,WACzBjC,EAAuBN,QAAQY,QAC/Bc,GAAoB,IAGlBc,EACF,eAAC,WAAD,WACI,cAAC,SAAD,CAAQjD,KAAK,SAASC,MAAOL,EAAE,6BAA8BsD,KAAK,cAAcrD,UAAU,oCAAoCK,QAAS8C,IACvI,cAAC,SAAD,CAAQhD,KAAK,SAASC,MAAOL,EAAE,6BAA8BsD,KAAK,cAAcrD,UAAU,qCAAqCsD,WAAS,OAIhJ,OACI,cAAC,WAAD,UACI,sBAAKtD,UAAU,wBAAf,UACI,cAAC,QAAD,CAAOuD,IAAK/C,IACZ,sBAAKgD,GAAG,WAAWxD,UAAU,kBAA7B,UACI,qBAAKA,UAAU,wBAAf,SACI,qBAAKA,UAAU,iBAAf,SAAiCD,EAAE,sCAEvC,qBAAKC,UAAU,SAAf,SACI,qBAAKA,UAAU,WAAf,SACI,qBAAKA,UAAU,OAAf,SAEI,uBAAMyD,SAAUlC,EAAasB,GAA7B,UACI,eAAC,QAAD,CAAOa,OAAQ,6BAAK3D,EAAE,2BAAtB,UACI,sBAAKC,UAAU,iBAAf,UACI,sBAAKA,UAAU,kBAAf,UACI,qBAAKA,UAAU,UAAf,SACI,uBAAO2D,QAAQ,WAAW3D,UAAU,YAApC,SAAgD,6BAAKD,EAAE,oCAE3D,sBAAKC,UAAU,eAAf,UACI,sBAAMA,UAAU,qBAAhB,SACI,mBAAGA,UAAU,uBAEjB,cAAC,IAAD,CACI4D,KAAK,WACLvC,QAASA,EACTwC,aAAc,GACdC,MAAO,CACHC,UAAU,EACVC,UAAW,EACXC,QAAS,4CAEbC,OAAQ,oBAAGC,MAASC,EAAZ,EAAYA,SAAUC,EAAtB,EAAsBA,MAAtB,OAAoC,cAAC,YAAD,CAAWlE,KAAK,OACxDH,UAAS,4DAAuD6B,EAAOa,SAAW,YAAc,IAChG0B,SAAUA,EAAUC,MAAOA,EAAOC,UAAW,GAAIC,YAAaxE,EAAE,yCAI5E,uBAAOyD,GAAG,iBAAiBxD,UAAS,UAAK6B,EAAOa,SAAW,oBAAsB,IAAjF,SAAwF3C,EAAE,sCAE9F,sBAAKC,UAAU,kBAAf,UACI,qBAAKA,UAAU,UAAf,SACI,uBAAO2D,QAAQ,QAAQ3D,UAAU,YAAjC,SAA6C,6BAAKD,EAAE,iCAExD,sBAAKC,UAAU,eAAf,UACI,sBAAMA,UAAU,qBAAhB,SACI,mBAAGA,UAAU,qBAEjB,cAAC,IAAD,CACI4D,KAAK,QACLvC,QAASA,EACTwC,aAAc,GACdC,MAAO,CACHC,UAAU,EACVE,QAAS,yDAEbC,OAAQ,oBAAGC,MAASC,EAAZ,EAAYA,SAAUC,EAAtB,EAAsBA,MAAtB,OAAoC,cAAC,YAAD,CAAWlE,KAAK,OACxDH,UAAS,4DAAuD6B,EAAOe,MAAQ,YAAc,IAC7FwB,SAAUA,EAAUC,MAAOA,EAAOC,UAAW,GAAIC,YAAaxE,EAAE,sCAG5E,uBAAOyD,GAAG,cAAcxD,UAAS,UAAK6B,EAAOe,MAAQ,oBAAsB,IAA3E,SAAkF7C,EAAE,mCAExF,sBAAKC,UAAU,kBAAf,UACI,qBAAKA,UAAU,UAAf,SACI,uBAAO2D,QAAQ,WAAW3D,UAAU,YAApC,SAAgD,6BAAKD,EAAE,oCAE3D,sBAAKC,UAAU,eAAf,UACI,sBAAMA,UAAU,qBAAhB,SACI,mBAAGA,UAAU,sBAEjB,cAAC,IAAD,CACI4D,KAAK,WACLvC,QAASA,EACTwC,aAAc,GACdC,MAAO,CACHC,UAAU,EACVC,UAAW,EACXC,QAAS,4DAEbC,OAAQ,oBAAGC,MAASC,EAAZ,EAAYA,SAAUC,EAAtB,EAAsBA,MAAtB,OAAoC,cAAC,YAAD,CAAWlE,KAAK,OACxDqE,MAAO,CACHC,aAAa,GAAD,OAAKlC,EAAgB,GAAK,OAA1B,KACZmC,mBAAmB,GAAD,OAAKnC,EAAgB,GAAK,OAA1B,MAEtBvC,UAAS,4DAAuD6B,EAAOc,SAAW,YAAc,IAChGyB,SAAUA,EAAUC,MAAOA,EAAOC,UAAW,GAC7CC,YAAaxE,EAAE,sCAGvB,sBAAMC,UAAU,cAAhB,SACI,cAAC,SAAD,CAAQG,KAAK,SAASC,MAAoB,UAAML,EAAnBwC,EAAqB,+BAAyC,iCAAmCvC,UAAU,sCACpIqD,KAAMd,EAAgB,kBAAoB,wBAAyBlC,QAtI3F,WAC5BmC,GAAiBD,WAwIuB,uBAAOiB,GAAG,iBAAiBxD,UAAS,UAAK6B,EAAOc,SAAW,oBAAsB,IAAjF,SAAwF5C,EAAE,yCAGlG,qBAAKC,UAAU,SAAf,SACI,sBAAKA,UAAU,WAAWwE,MAAO,CAAEG,UAAW,SAA9C,UACI,cAAC,SAAD,CAAQxE,KAAK,SAASkD,KAAK,cAAcjD,MAAOL,EAAE,6BAA8BC,UAAU,kCAAkCK,QApH3I,WACzBiC,GAAoB,IAmH+KsC,UAAW9C,IAAYC,IAClL,cAAC,SAAD,CAAQ5B,KAAK,SAASkD,KAAK,cAAcjD,MAAOL,EAAE,2BAA4BC,UAAU,8CAA8CK,QAAS,kBAAMoC,eAIjK,cAAC,IAAD,CACIe,GAAG,oBACHD,IAAKrC,EACL2D,QArLL,2CAsLKC,UAnJtB,SAACT,GACXU,MAAMV,IAmJ0BW,KAAK,cAET,cAAC,SAAD,CAAQxB,GAAG,kBAAkByB,QAAS5C,EAAkBmC,MAAO,CAAEU,MAAO,SAAWxB,OAAQ3D,EAAE,sBAAuBoF,OAAK,EAACnF,UAAU,UAAUoF,OAAQhC,EAAwBiC,OAAQlC,EAAtL,SACI,qBAAKnD,UAAU,WAAWwE,MAAO,CAAEG,UAAW,UAA9C,SACI,6BAAK5E,EAAE,kDCxLpCuF,UAZI,WAEf,OACI,eAAC,WAAD,WACI,qBAAKtF,UAAU,wBAAf,SACI,cAAC,EAAD,MAEJ,cAACL,EAAA,EAAD","file":"static/js/16.fdac4e53.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef, useCallback, Fragment, Suspense, lazy } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\n// import hook for translations and i18n configuration file\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nimport { Button } from 'primereact/button';\r\n\r\nconst AppFooter = () => {\r\n\r\n    const history = useHistory();\r\n    // destructuring t() function for useTranslation()\r\n    const [t, i18n] = useTranslation('common');\r\n\r\n    return (\r\n        <Fragment>\r\n            <div className=\"layout-footer-custom\">\r\n                <div className=\"p-grid\">\r\n                    <div className=\"p-col-12 p-lg-4\">\r\n                        <img src=\"assets/layout/images/logo-roma-white.svg\" alt=\"logo\" />\r\n                    </div>\r\n                    <div className=\"p-col-12 p-lg-4\">\r\n                        <div className=\"footer-text-center\">\r\n                            <h4>{t(\"footerPage.title1\")}</h4>\r\n                            <ul>\r\n                                <li><Button className=\"p-link\"><i className=\"pi pi-facebook\"></i></Button></li>\r\n                                <li><Button className=\"p-link\"><i className=\"pi pi-github\"></i></Button></li>\r\n                            </ul>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"p-col-12 p-lg-4\">\r\n                        <h4>{t(\"footerPage.title2\")}</h4>\r\n                        <ul>\r\n                            <li><Button type=\"button\" label={t(\"footerPage.subTitle1\")} className=\"p-link\" onClick={() => { history.push('/') }} /></li>\r\n                            <li><Button type=\"button\" label={t(\"footerPage.subTitle2\")} className=\"p-link\" onClick={() => { history.push('/about') }} /></li>\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nexport default AppFooter;","import React, { useState, useEffect, useRef, useCallback, Fragment, Suspense, lazy } from 'react';\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useHistory } from 'react-router-dom';\r\n// import hook for translations and i18n configuration file\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useForm, Controller } from 'react-hook-form';\r\nimport ReCaptcha from \"react-google-recaptcha\";\r\nimport { Button } from 'primereact/button';\r\nimport { Dialog } from 'primereact/dialog';\r\nimport { InputText } from \"primereact/inputtext\";\r\nimport { Panel } from 'primereact/panel';\r\nimport { Toast } from \"primereact/toast\";\r\n\r\nconst v2CheckboxReCaptchaSiteKey = \"6LeIxAcTAAAAAJcZVRqyHh71UMIEGNQ_MXjiZKhI\";\r\n\r\nconst messageToast = (toast, severity, summary, detail) => {\r\n    toast.current.show({ severity: severity, summary: summary, detail: detail, life: 3000 });\r\n}\r\n\r\nconst SignupAccount = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const [t, i18n] = useTranslation('common');\r\n    const toast = useRef(null);\r\n    const recaptchaSignupUserRef = useRef();\r\n\r\n    /* functions to build form returned by useForm() hook */\r\n    const {\r\n        register,\r\n        control,\r\n        handleSubmit,\r\n        reset,\r\n        watch,\r\n        setValue,\r\n        getValues,\r\n        // Read the formState before render to subscribe the form state through the Proxy\r\n        formState: { errors, isDirty, isValid, isSubmitting, touchedFields, submitCount, dirtyFields } }\r\n        = useForm({ mode: \"onChange\" });\r\n\r\n    /* Initialize state to hold */\r\n    const [signupUserDialog, setSignupUserDialog] = useState(false);\r\n    const [passwordShown, setPasswordShown] = useState(false);\r\n\r\n    const togglePasswordVisiblity = () => {\r\n        setPasswordShown(passwordShown ? false : true);\r\n    };\r\n\r\n    const error = (value) => {\r\n        alert(value);\r\n    }\r\n\r\n    const resetFiels = () => {\r\n        recaptchaSignupUserRef.current.reset();\r\n        reset({ username: \"\", password: \"\", email: \"\" });\r\n    }\r\n\r\n    /* This is a special method for the implementation of this project */\r\n    /* Currently method is fake signup for user */\r\n    const onSubmitSignup = async (data) => {\r\n        const recaptchaSignupUserResponse = await recaptchaSignupUserRef.current.executeAsync();\r\n        handleSignupUser(recaptchaSignupUserResponse, data);\r\n    }\r\n\r\n    const handleSignupUser = async (recaptchaSignupUserResponse, data) => {\r\n        messageToast(toast, \"success\", `${t(\"globalSuccessMsg.successMessageTitle\")}`, `${t(\"signupPage.success201MessageSubtitle\")}`);\r\n        setSignupUserDialog(false);\r\n        resetFiels();\r\n    }\r\n\r\n    const openSignupUserDialog = () => {\r\n        setSignupUserDialog(true);\r\n    }\r\n\r\n    const hideSignupUserDialog = () => {\r\n        recaptchaSignupUserRef.current.reset();\r\n        setSignupUserDialog(false);\r\n    }\r\n\r\n    const signupUserDialogFooter = (\r\n        <Fragment>\r\n            <Button type=\"button\" label={t('globalButton.cancelTitle1')} icon=\"pi pi-times\" className=\"p-button-outlined p-button-danger\" onClick={hideSignupUserDialog} />\r\n            <Button type=\"submit\" label={t('globalButton.acceptTitle1')} icon=\"pi pi-check\" className=\"p-button-success p-button-outlined\" autoFocus />\r\n        </Fragment>\r\n    )\r\n\r\n    return (\r\n        <Fragment>\r\n            <div className=\"layout-content-custom\">\r\n                <Toast ref={toast} />\r\n                <div id=\"features\" className=\"layout-features\">\r\n                    <div className=\"features-topic-shadow\">\r\n                        <div className=\"features-topic\">{t('signupPage.featuresTopicTitle1')}</div>\r\n                    </div>\r\n                    <div className=\"p-grid\">\r\n                        <div className=\"p-col-12\">\r\n                            <div className=\"card\">\r\n                                {/* \"handleSubmit\" will validate your inputs before invoking \"onSubmit\" */}\r\n                                <form onSubmit={handleSubmit(onSubmitSignup)}>\r\n                                    <Panel header={<h3>{t('signupPage.panelTitle')}</h3>}>\r\n                                        <div className=\"p-grid p-fluid\">\r\n                                            <div className=\"p-col-12 p-md-6\">\r\n                                                <div className=\"p-field\">\r\n                                                    <label htmlFor=\"username\" className=\"p-d-block\"><h5>{t('globalInput.usernameTitle2')}</h5></label>\r\n                                                </div>\r\n                                                <div className=\"p-inputgroup\">\r\n                                                    <span className=\"p-inputgroup-addon\">\r\n                                                        <i className=\"fa fa-fw fa-user\"></i>\r\n                                                    </span>\r\n                                                    <Controller\r\n                                                        name=\"username\"\r\n                                                        control={control}\r\n                                                        defaultValue={\"\"}\r\n                                                        rules={{\r\n                                                            required: true,\r\n                                                            minLength: 3,\r\n                                                            pattern: /^(?:[a-zA-Z'-.])+(?:[\\s][a-zA-Z'-.]+)*$/i\r\n                                                        }}\r\n                                                        render={({ field: { onChange, value } }) => <InputText type=\"text\"\r\n                                                            className={`p-inputtext p-widget p-state-default p-corner-all ${errors.username ? 'p-invalid' : ''}`}\r\n                                                            onChange={onChange} value={value} maxLength={20} placeholder={t('globalInput.usernameSubtitle1')}\r\n                                                        />}\r\n                                                    />\r\n                                                </div>\r\n                                                <small id=\"username1-help\" className={`${errors.username ? 'p-error p-d-block' : ''}`}>{t(\"globalInputMsg.usernameTitle1\")}</small>\r\n                                            </div>\r\n                                            <div className=\"p-col-12 p-md-6\">\r\n                                                <div className=\"p-field\">\r\n                                                    <label htmlFor=\"email\" className=\"p-d-block\"><h5>{t('globalInput.emailTitle2')}</h5></label>\r\n                                                </div>\r\n                                                <div className=\"p-inputgroup\">\r\n                                                    <span className=\"p-inputgroup-addon\">\r\n                                                        <i className=\"fa fa-fw fa-at\"></i>\r\n                                                    </span>\r\n                                                    <Controller\r\n                                                        name=\"email\"\r\n                                                        control={control}\r\n                                                        defaultValue={\"\"}\r\n                                                        rules={{\r\n                                                            required: true,\r\n                                                            pattern: /^(?:[A-Z0-9._%+-])+@(?:[A-Z0-9.-])+(?:\\.[A-Z]{2,4})$/i\r\n                                                        }}\r\n                                                        render={({ field: { onChange, value } }) => <InputText type=\"text\"\r\n                                                            className={`p-inputtext p-widget p-state-default p-corner-all ${errors.email ? 'p-invalid' : ''}`}\r\n                                                            onChange={onChange} value={value} maxLength={35} placeholder={t(\"globalInput.emailSubtitle1\")} />}\r\n                                                    />\r\n                                                </div>\r\n                                                <small id=\"email1-help\" className={`${errors.email ? 'p-error p-d-block' : ''}`}>{t(\"globalInputMsg.emailTitle1\")}</small>\r\n                                            </div>\r\n                                            <div className=\"p-col-12 p-md-6\">\r\n                                                <div className=\"p-field\">\r\n                                                    <label htmlFor=\"password\" className=\"p-d-block\"><h5>{t('globalInput.passwordTitle2')}</h5></label>\r\n                                                </div>\r\n                                                <div className=\"p-inputgroup\">\r\n                                                    <span className=\"p-inputgroup-addon\">\r\n                                                        <i className=\"fa fa-fw fa-key\"></i>\r\n                                                    </span>\r\n                                                    <Controller\r\n                                                        name=\"password\"\r\n                                                        control={control}\r\n                                                        defaultValue={\"\"}\r\n                                                        rules={{\r\n                                                            required: true,\r\n                                                            minLength: 8,\r\n                                                            pattern: /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#\\$%\\^&\\*_])\\S*$/i\r\n                                                        }}\r\n                                                        render={({ field: { onChange, value } }) => <InputText type=\"text\"\r\n                                                            style={{\r\n                                                                textSecurity: `${passwordShown ? '' : 'disc'} `,\r\n                                                                WebkitTextSecurity: `${passwordShown ? '' : 'disc'} `\r\n                                                            }}\r\n                                                            className={`p-inputtext p-widget p-state-default p-corner-all ${errors.password ? 'p-invalid' : ''}`}\r\n                                                            onChange={onChange} value={value} maxLength={20}\r\n                                                            placeholder={t('globalInput.passwordSubtitle1')}\r\n                                                        />}\r\n                                                    />\r\n                                                    <span className=\"p-buttonset\">\r\n                                                        <Button type=\"button\" label={passwordShown ? `${t(\"globalButton.isShowPassword1\")}` : `${t(\"globalButton.isShowPassword2\")}`} className=\"p-button-rounded p-button-secondary\"\r\n                                                            icon={passwordShown ? \"fa fa-fw fa-eye\" : \"fa fa-fw fa-eye-slash\"} onClick={togglePasswordVisiblity} />\r\n                                                    </span>\r\n                                                </div>\r\n                                                <small id=\"password1-help\" className={`${errors.password ? 'p-error p-d-block' : ''}`}>{t(\"globalInputMsg.passwordTitle1\")}</small>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div className=\"p-grid\">\r\n                                            <div className=\"p-col-12\" style={{ textAlign: 'right' }}>\r\n                                                <Button type=\"button\" icon=\"pi pi-check\" label={t('globalButton.acceptTitle2')} className=\"p-button-outlined p-mr-2 p-mb-2\" onClick={openSignupUserDialog} disabled={!isDirty || !isValid} />\r\n                                                <Button type=\"button\" icon=\"pi pi-check\" label={t('globalButton.resetField')} className=\"p-button-outlined p-button-secondary p-mb-2\" onClick={() => resetFiels()} />\r\n                                            </div>\r\n                                        </div>\r\n                                    </Panel>\r\n                                    <ReCaptcha\r\n                                        id=\"captchaSignupUser\"\r\n                                        ref={recaptchaSignupUserRef}\r\n                                        sitekey={v2CheckboxReCaptchaSiteKey}\r\n                                        onErrored={error}\r\n                                        size=\"invisible\"\r\n                                    />\r\n                                    <Dialog id=\"dlgConfirmation\" visible={signupUserDialog} style={{ width: '450px' }} header={t('globalDialog.Title')} modal className=\"p-fluid\" footer={signupUserDialogFooter} onHide={hideSignupUserDialog}>\r\n                                        <div className=\"p-col-12\" style={{ textAlign: 'center' }}>\r\n                                            <h4>{t('signupPage.dialogTitle')}</h4>\r\n                                        </div>\r\n                                    </Dialog>\r\n                                </form>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nexport default SignupAccount;","import React, { useState, useEffect, useRef, useCallback, Fragment, Suspense, lazy } from 'react';\r\nimport AppFooter from '../AppFooter';\r\nimport SignupAccount from '../components/signup/SignupAccount';\r\n\r\nconst SignupPage = () => {\r\n\r\n    return (\r\n        <Fragment>\r\n            <div className=\"layout-content-custom\">\r\n                <SignupAccount />\r\n            </div>\r\n            <AppFooter />\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nexport default SignupPage;"],"sourceRoot":""}