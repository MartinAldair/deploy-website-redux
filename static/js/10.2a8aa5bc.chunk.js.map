{"version":3,"sources":["AppFooter.js","services/UserService.js","redux/actions/accounts.js","components/managmentaccounts/ProfilesAccounts.js","pages/ManagmentAccountsPage.js"],"names":["AppFooter","history","useHistory","useTranslation","t","className","src","alt","type","label","onClick","push","API_URL","process","getUserById","userId","axios","get","getAllListOfDataUsersByRoleName","currentRole","seletedUser","user","types","selectedUser","removeSeletedUser","getAllListOfDataUsers","dispatch","UserService","then","response","status","users","result","data","map","id","username","catch","error","request","console","log","Promise","reject","message","config","messageToast","toast","severity","summary","detail","current","show","life","ProfilesAccounts","useDispatch","useState","globalFilter","setGlobalFilter","useRef","dt","loading","setLoading","recaptchaSignupUserRef","useForm","defaultValues","control","register","reset","handleSubmit","watch","setValue","getValues","formState","errors","isDirty","isValid","isSubmitting","touchedFields","submitCount","dirtyFields","useFieldArray","name","userFields","fields","userAppend","append","userRemove","remove","userInsert","insert","mode","control2","handleSubmit2","reset2","errors2","isDirty2","isValid2","control3","handleSubmit3","reset3","setValue3","getValues3","errors3","isDirty3","isValid3","handleSubmit4","setValue4","getValues4","currentData","useSelector","state","Authentication","tokenDecoded","jwt_decode","token","_currentUserId","signupUserDialog","setSignupUserDialog","updateUserDialog","setUpdateUserDialog","deleteUserDialog","setDeleteUserDialog","passwordShown","setPasswordShown","value","alert","doGetAllListOfDataUsers","useCallback","useEffect","undefined","onSubmitUpdate","e","a","handleUpdateUser","_selectedUserId","selectedUsername","some","item","selectedUserId","userValue","objIndex","findIndex","handleSignupUser","recaptchaSignupUserResponse","isValidUsername","password","captchaSignupUser","maxObj","reduce","max","obj","idValue","arr","header","onInput","target","placeholder","confirmSignupUser","hideSignupUserDialog","signupUserDialogFooter","icon","autoFocus","disabled","exportCSV","confirmUpdateUser","rowData","hideDeleteUserDialog","onSubmitDelete","handleDeleteUser","isValidUserId","deleteUserDialogFooter","hideUpdateUserDialog","updateUserDialogFooter","ref","left","right","dataKey","paginator","rows","rowsPerPageOptions","paginatorTemplate","currentPageReportTemplate","emptyMessage","field","filterField","body","filter","filterPlaceholder","filterMatchMode","sortable","confirmDeleteUser","onSubmit","getValue","visible","style","width","modal","footer","onHide","htmlFor","defaultValue","rules","required","minLength","pattern","render","onChange","maxLength","textSecurity","WebkitTextSecurity","sitekey","onErrored","fontSize","ManagmentAccountsPage"],"mappings":"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","file":"static/js/10.2a8aa5bc.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef, useCallback, Fragment, Suspense, lazy } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\n// import hook for translations and i18n configuration file\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nimport { Button } from 'primereact/button';\r\n\r\nconst AppFooter = () => {\r\n\r\n    const history = useHistory();\r\n    // destructuring t() function for useTranslation()\r\n    const [t, i18n] = useTranslation('common');\r\n\r\n    return (\r\n        <Fragment>\r\n            <div className=\"layout-footer-custom\">\r\n                <div className=\"p-grid\">\r\n                    <div className=\"p-col-12 p-lg-4\">\r\n                        <img src=\"assets/layout/images/logo-roma-white.svg\" alt=\"logo\" />\r\n                    </div>\r\n                    <div className=\"p-col-12 p-lg-4\">\r\n                        <div className=\"footer-text-center\">\r\n                            <h4>{t(\"footerPage.title1\")}</h4>\r\n                            <ul>\r\n                                <li><Button className=\"p-link\"><i className=\"pi pi-facebook\"></i></Button></li>\r\n                                <li><Button className=\"p-link\"><i className=\"pi pi-github\"></i></Button></li>\r\n                            </ul>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"p-col-12 p-lg-4\">\r\n                        <h4>{t(\"footerPage.title2\")}</h4>\r\n                        <ul>\r\n                            <li><Button type=\"button\" label={t(\"footerPage.subTitle1\")} className=\"p-link\" onClick={() => { history.push('/') }} /></li>\r\n                            <li><Button type=\"button\" label={t(\"footerPage.subTitle2\")} className=\"p-link\" onClick={() => { history.push('/about') }} /></li>\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nexport default AppFooter;","import axios from \"axios\";\r\nconst API_URL = process.env.REACT_APP_API_URL;\r\n\r\nconst getUserById = (userId) => {\r\n    return axios\r\n        .get(API_URL + \"account/\" + userId);\r\n}\r\n\r\nconst getAllListOfDataUsersByRoleName = (currentRole) => {\r\n    return axios.get(API_URL + \"account\");\r\n}\r\n\r\nexport default {\r\n    getUserById,\r\n    getAllListOfDataUsersByRoleName\r\n};","import * as types from \"./types\";\r\n\r\nimport UserService from \"../../services/UserService\";\r\n\r\nexport const createCatalogUsersSuccess = (user) => ({\r\n    type: types.CREATE_CATALOG_USERS_SUCCESS,\r\n    user: [user]\r\n})\r\n\r\nexport const createCatalogUsersFailure = () => ({\r\n    type: types.CREATE_CATALOG_USERS_FAILURE\r\n})\r\n\r\nexport const getAllCatalogUsersSuccess = (users) => ({\r\n    type: types.GET_ALL_CATALOG_USERS_SUCCESS,\r\n    users: users\r\n})\r\n\r\nexport const getAllCatalogUsersFailure = () => ({\r\n    type: types.GET_ALL_CATALOG_USERS_FAILURE\r\n})\r\n\r\nexport const updateCatalogUsersSuccess = (user) => ({\r\n    type: types.UPDATE_CATALOG_USERS_SUCCESS,\r\n    user: [user]\r\n})\r\n\r\nexport const updateCatalogUsersFailure = () => ({\r\n    type: types.UPDATE_CATALOG_USERS_FAILURE\r\n})\r\n\r\nexport const deleteCatalogUsersSuccess = (id) => ({\r\n    type: types.DELETE_CATALOG_USERS_SUCCESS,\r\n    id: id\r\n})\r\n\r\nexport const deleteCatalogUsersFailure = () => ({\r\n    type: types.DELETE_CATALOG_USERS_FAILURE\r\n})\r\n\r\nexport const seletedUser = (user) => ({\r\n    type: types.SELECTED_USER,\r\n    selectedUser: user\r\n})\r\n\r\nexport const removeSeletedUser = () => ({\r\n    type: types.REMOVE_SELECTED_USER\r\n})\r\n\r\nexport const getAllListOfDataUsers = (currentRole) => (dispatch) => {\r\n    return UserService.getAllListOfDataUsersByRoleName(currentRole)\r\n        .then((response) => {\r\n            const code = response.status;\r\n            // to extract specific values from array of objects\r\n            let result = response.data.map(({ id, username }) => ({ id, username }));\r\n            dispatch(getAllCatalogUsersSuccess(result));\r\n            return response;\r\n        })\r\n        .catch((error) => { /* Handling Axios error in React */\r\n            if (error.response) {\r\n                // The request was made and the server responded with a status code\r\n                const code = error.response.status;\r\n                return error.response;\r\n            } else if (error.request) {\r\n                // The request was made but no response was received `error.request` is an instance of XMLHttpRequest in the browser \r\n                // and an instance of http.ClientRequest in node.js\r\n                console.log(error.request);\r\n                return Promise.reject(error);\r\n            } else {\r\n                // Something happened in setting up the request that triggered an Error\r\n                console.log('Error', error.message);\r\n            }\r\n            console.log(error.config);\r\n        })\r\n}","import React, { useState, useEffect, useRef, useCallback, Fragment, Suspense, lazy } from 'react';\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { createCatalogUsersSuccess, getAllListOfDataUsers, updateCatalogUsersSuccess, deleteCatalogUsersSuccess, seletedUser, removeSeletedUser } from \"../../redux/actions/accounts\";\r\n// import hook for translations and i18n configuration file\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useForm, Controller, useFieldArray } from 'react-hook-form';\r\nimport ReCaptcha from \"react-google-recaptcha\";\r\nimport jwt_decode from \"jwt-decode\";\r\nimport { Button } from \"primereact/button\";\r\nimport { Column } from 'primereact/column';\r\nimport { DataTable } from 'primereact/datatable';\r\nimport { Dialog } from 'primereact/dialog';\r\nimport { InputText } from \"primereact/inputtext\";\r\nimport { Panel } from 'primereact/panel';\r\nimport { Toast } from \"primereact/toast\";\r\nimport { Toolbar } from 'primereact/toolbar';\r\n\r\nconst v2CheckboxReCaptchaSiteKey = \"6LeIxAcTAAAAAJcZVRqyHh71UMIEGNQ_MXjiZKhI\";\r\n\r\nconst messageToast = (toast, severity, summary, detail) => {\r\n    toast.current.show({ severity: severity, summary: summary, detail: detail, life: 3000 });\r\n}\r\n\r\nconst ProfilesAccounts = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    // destructuring t() function for useTranslation()\r\n    const [t, i18n] = useTranslation('common');\r\n    const [globalFilter, setGlobalFilter] = useState(null);\r\n    const toast = useRef(null);\r\n    const dt = useRef(null);\r\n    const [loading, setLoading] = useState(false);\r\n    const recaptchaSignupUserRef = useRef();\r\n\r\n    // functions to build form returned by useForm() hook\r\n    const {\r\n        register,\r\n        control,\r\n        handleSubmit,\r\n        reset,\r\n        watch,\r\n        setValue,\r\n        getValues,\r\n        // Read the formState before render to subscribe the form state through the Proxy\r\n        formState: { errors, isDirty, isValid, isSubmitting, touchedFields, submitCount, dirtyFields } }\r\n        = useForm({ defaultValues: { users: [] } });\r\n\r\n    // setup multiple \"useFieldArray\" functions  to build form returned by useForm() hook\r\n    const {\r\n        fields: userFields,\r\n        append: userAppend,\r\n        remove: userRemove,\r\n        insert: userInsert\r\n    } = useFieldArray({ control, name: \"users\" });\r\n\r\n    // functions to build form returned by useForm() hook\r\n    const {\r\n        register: registe2,\r\n        control: control2,\r\n        handleSubmit: handleSubmit2,\r\n        reset: reset2,\r\n        watch: watch2,\r\n        setValue: setValue2,\r\n        getValues: getValues2,\r\n        // Read the formState before render to subscribe the form state through the Proxy\r\n        formState: { errors: errors2, isDirty: isDirty2, isValid: isValid2, isSubmitting: isSubmitting2, touchedFields: touchedFields2, submitCount: submitCount2, dirtyFields: dirtyFields2 } }\r\n        = useForm({ mode: \"onChange\" });\r\n\r\n    // functions to build form returned by useForm() hook\r\n    const {\r\n        register: registe3,\r\n        control: control3,\r\n        handleSubmit: handleSubmit3,\r\n        reset: reset3,\r\n        watch: watch3,\r\n        setValue: setValue3,\r\n        getValues: getValues3,\r\n        // Read the formState before render to subscribe the form state through the Proxy\r\n        formState: { errors: errors3, isDirty: isDirty3, isValid: isValid3, isSubmitting: isSubmitting3, touchedFields: touchedFields3, submitCount: submitCount3, dirtyFields: dirtyFields3 } }\r\n        = useForm({ mode: \"onChange\" });\r\n\r\n    // functions to build form returned by useForm() hook\r\n    const {\r\n        register: registe4,\r\n        control: control4,\r\n        handleSubmit: handleSubmit4,\r\n        reset: reset4,\r\n        watch: watch4,\r\n        setValue: setValue4,\r\n        getValues: getValues4,\r\n        // Read the formState before render to subscribe the form state through the Proxy\r\n        formState: { errors: errors4, isDirty: isDirty4, isValid: isValid4, isSubmitting: isSubmitting4, touchedFields: touchedFields4, submitCount: submitCount4, dirtyFields: dirtyFields4 } }\r\n        = useForm();\r\n\r\n    /* Initialize state to hold */\r\n    const currentData = useSelector((state) => state.Authentication);\r\n    const tokenDecoded = jwt_decode(currentData.token);\r\n    const _currentUserId = tokenDecoded !== null ? tokenDecoded.id : \"0\";\r\n    const [currentRole, setCurrentRole] = useState(\"ROLE_USER\");\r\n    const [signupUserDialog, setSignupUserDialog] = useState(false);\r\n    const [updateUserDialog, setUpdateUserDialog] = useState(false);\r\n    const [deleteUserDialog, setDeleteUserDialog] = useState(false);\r\n    const [passwordShown, setPasswordShown] = useState(false)\r\n\r\n    const error = (value) => {\r\n        alert(value);\r\n    }\r\n\r\n    const togglePasswordVisiblity = () => {\r\n        setPasswordShown(passwordShown ? false : true);\r\n    };\r\n\r\n    /* This is a special method for the implementation of this project */\r\n    /* Currently method is only running the effect once when the page loads */\r\n    const doGetAllListOfDataUsers = useCallback(() => {\r\n        setLoading(true)\r\n        dispatch(getAllListOfDataUsers(currentRole))\r\n            .then((response) => {\r\n                if (response.status >= 200 && response.status < 300) {\r\n                    setLoading(false);\r\n                    let result = response.data.map(({ id, username }) => ({ id, username }));\r\n                    reset({\r\n                        users: result\r\n                    });\r\n                } else {\r\n                    setLoading(false);\r\n                    switch (response.status) {\r\n                        case 400:\r\n                            messageToast(toast, 'error', `${t(\"globalErrorMsg.errorMessageTitle1\")}`, `${t(\"globalErrorMsg.error400MessageSubtitle\")}`);\r\n                            break;\r\n                        case 404:\r\n                            messageToast(toast, 'error', `${t(\"globalErrorMsg.errorMessageTitle1\")}`, `${t(\"getUsers.error404MessageSubtitle\")}`);\r\n                            break;\r\n                        case 500:\r\n                            messageToast(toast, 'error', `${t(\"globalErrorMsg.errorMessageTitle1\")}`, `${t(\"globalErrorMsg.error500MessageSubtitle\")}`);\r\n                            break;\r\n                        default:\r\n                        // do nothing\r\n                    }\r\n                }\r\n            })\r\n            .catch(() => {\r\n                setLoading(false);\r\n                console.log('No internet connection found. App is running in offline mode.');\r\n            });\r\n    }, [toast, currentRole, reset])\r\n\r\n    useEffect(() => {\r\n        // first time to fetch data\r\n        if (_currentUserId === null || _currentUserId === undefined) {\r\n            history.push('/error');\r\n        } else {\r\n            doGetAllListOfDataUsers();\r\n        }\r\n    }, [doGetAllListOfDataUsers]);\r\n\r\n    const onSubmitUpdate = async (data, e) => {\r\n        handleUpdateUser(data);\r\n    }\r\n\r\n    /* This is a special method for the implementation of this project */\r\n    /* Currently method is fake update for user */\r\n    const handleUpdateUser = (data) => {\r\n        const _selectedUserId = getValues3(\"selectedUserId\");\r\n        const selectedUsername = data.selectedUsername;\r\n        let isValidUsername = userFields.some(item => item.username === selectedUsername);\r\n        switch (isValidUsername) {\r\n            case true:\r\n                messageToast(toast, 'error', `${t(\"globalErrorMsg.errorMessageTitle1\")}`, `${t(\"updateUser.error403MessageSubtitle\")}`);\r\n                dispatch(removeSeletedUser());\r\n                const userValue2 = {\r\n                    selectedUserId: _selectedUserId,\r\n                    selectedUsername: selectedUsername\r\n                }\r\n                reset3(userValue2);\r\n                break;\r\n            case false:\r\n                const userValue = {\r\n                    id: _selectedUserId,\r\n                    username: selectedUsername\r\n                }\r\n                dispatch(removeSeletedUser());\r\n                dispatch(updateCatalogUsersSuccess(userValue));\r\n                const objIndex = userFields.findIndex(item => item.id === _selectedUserId);\r\n                userRemove(objIndex);\r\n                userInsert(\r\n                    objIndex,\r\n                    userValue\r\n                );\r\n                setUpdateUserDialog(false);\r\n                messageToast(toast, \"success\", `${t(\"globalSuccessMsg.successMessageTitle\")}`, `${t(\"updateUser.success202MessageSubtitle\")}`);\r\n                reset3();\r\n                break;\r\n            default:\r\n            // do nothing\r\n        }\r\n    }\r\n\r\n    /* This is a special method for the implementation of this project */\r\n    /* Currently method is fake signup for user */\r\n    const onSubmitSignup = (data, e) => {\r\n        const recaptchaSignupUserResponse = recaptchaSignupUserRef.current.getValue();\r\n        handleSignupUser(recaptchaSignupUserResponse, data);\r\n    }\r\n\r\n    const handleSignupUser = async (recaptchaSignupUserResponse, data) => {\r\n        let isValidUsername = userFields.some(item => item.username === data.username);\r\n        switch (isValidUsername) {\r\n            case true:\r\n                recaptchaSignupUserRef.current.reset();\r\n                reset2({ username: \"\", password: \"\", captchaSignupUser: \"\" });\r\n                messageToast(toast, 'error', `${t(\"globalErrorMsg.errorMessageTitle1\")}`, `${t(\"signupPage.error401MessageSubtitle\")}`);\r\n                break;\r\n            case false:\r\n                let maxObj = userFields.reduce((max, obj) => (max.id > obj.id) ? max : obj);\r\n                const idValue = maxObj.id + 1;\r\n                const userValue = {\r\n                    id: idValue,\r\n                    username: data.username\r\n                }\r\n                dispatch(createCatalogUsersSuccess(userValue))\r\n                const arr = []\r\n                // Create object's account property.\r\n                arr.push(userValue);\r\n                userAppend(arr);\r\n                messageToast(toast, \"success\", `${t(\"globalSuccessMsg.successMessageTitle\")}`, `${t(\"signupPage.success201MessageSubtitle\")}`);\r\n                setSignupUserDialog(false);\r\n                recaptchaSignupUserRef.current.reset();\r\n                reset2({ username: \"\", password: \"\", captchaSignupUser: \"\" });\r\n                break;\r\n            default:\r\n            // do nothing\r\n        }\r\n    }\r\n\r\n    const header = (\r\n        <div className=\"table-header\">\r\n            <h5 className=\"p-m-0\">{t(\"getUsers.datatableTitle1\")}</h5>\r\n            <span className=\"p-input-icon-left\">\r\n                <i className=\"pi pi-search\" />\r\n                <InputText type=\"search\" onInput={(e) => setGlobalFilter(e.target.value)} placeholder={t(\"globalDatatable.content5\")} />\r\n            </span>\r\n        </div>\r\n    );\r\n\r\n    const confirmSignupUser = () => {\r\n        setSignupUserDialog(true);\r\n    }\r\n\r\n    const leftToolbarTemplate = () => {\r\n        return (\r\n            <Fragment>\r\n                <Button label={t('globalButton.newField')} icon=\"pi pi-plus\" className=\"p-button-success p-mr-2\" onClick={confirmSignupUser} />\r\n            </Fragment>\r\n        )\r\n    }\r\n\r\n    const hideSignupUserDialog = () => {\r\n        recaptchaSignupUserRef.current.reset();\r\n        reset2({ username: \"\", password: \"\", captchaSignupUser: \"\" });\r\n        setSignupUserDialog(false);\r\n    }\r\n\r\n    const signupUserDialogFooter = (\r\n        <Fragment>\r\n            <Button type=\"button\" label=\"No\" icon=\"pi pi-times\" className=\"p-button-outlined p-button-danger\" onClick={hideSignupUserDialog} />\r\n            <Button type=\"submit\" label=\"Yes\" icon=\"pi pi-check\" className=\"p-button-outlined p-button-success\" autoFocus disabled={!isDirty2 || !isValid2} />\r\n        </Fragment>\r\n    );\r\n\r\n    const exportCSV = () => {\r\n        dt.current.exportCSV();\r\n    }\r\n\r\n    const rightToolbarTemplate = () => {\r\n        return (\r\n            <Fragment>\r\n                <Button label={t('globalButton.exportField')} icon=\"pi pi-upload\" className=\"p-button-help\" onClick={exportCSV} />\r\n            </Fragment>\r\n        )\r\n    }\r\n\r\n    const confirmDeleteUser = (rowData) => {\r\n        setValue4('selectedUserId1', rowData.id);\r\n        const userValue = {\r\n            id: rowData.id,\r\n            username: rowData.username\r\n        }\r\n        dispatch(seletedUser(userValue));\r\n        setDeleteUserDialog(true);\r\n    }\r\n\r\n    const confirmUpdateUser = async (rowData) => {\r\n        setValue3('selectedUserId', rowData.id);\r\n        setValue3('selectedUsername', rowData.username);\r\n        const userValue = {\r\n            id: rowData.id,\r\n            username: rowData.username\r\n        }\r\n        dispatch(seletedUser(userValue));\r\n        setUpdateUserDialog(true);\r\n    }\r\n\r\n    const actionBodyTemplate = (rowData) => {\r\n        return (\r\n            <Fragment>\r\n                <Button type=\"button\" icon=\"pi pi-pencil\" className=\"p-button-rounded p-button-success p-mr-2\" onClick={() => confirmUpdateUser(rowData)} />\r\n                <Button type=\"button\" icon=\"pi pi-trash\" className=\"p-button-rounded p-button-warning\" onClick={() => confirmDeleteUser(rowData)} />\r\n            </Fragment>\r\n        );\r\n    }\r\n\r\n    const hideDeleteUserDialog = () => {\r\n        dispatch(removeSeletedUser());\r\n        setDeleteUserDialog(false);\r\n    }\r\n\r\n    /* This is a special method for the implementation of this project */\r\n    /* Currently method is fake delete for user */\r\n    const onSubmitDelete = () => {\r\n        const _selectedUserId = getValues4(\"selectedUserId1\");\r\n        handleDeleteUser(_selectedUserId);\r\n    }\r\n\r\n    const handleDeleteUser = async (_selectedUserId) => {\r\n        let isValidUserId = userFields.some(item => item.id === _selectedUserId);\r\n        switch (isValidUserId) {\r\n            case true:\r\n                dispatch(removeSeletedUser());\r\n                dispatch(deleteCatalogUsersSuccess(_selectedUserId))\r\n                const objIndex = userFields.findIndex(item => item.id === _selectedUserId);\r\n                userRemove(objIndex);\r\n                setDeleteUserDialog(false);\r\n                messageToast(toast, \"success\", `${t(\"globalSuccessMsg.successMessageTitle\")}`, `${t(\"deleteUser.success202MessageSubtitle\")}`);\r\n                break;\r\n            case false:\r\n                messageToast(toast, 'error', `${t(\"globalErrorMsg.errorMessageTitle1\")}`, `${t(\"deleteUser.error404MessageSubtitle\")}`);\r\n                dispatch(removeSeletedUser());\r\n                break;\r\n            default:\r\n            // do nothing\r\n        }\r\n    }\r\n\r\n    const deleteUserDialogFooter = (\r\n        <Fragment>\r\n            <Button type=\"button\" label=\"No\" icon=\"pi pi-times\" className=\"p-button-outlined p-button-danger\" onClick={hideDeleteUserDialog} />\r\n            <Button type=\"button\" label=\"Yes\" icon=\"pi pi-check\" className=\"p-button-outlined p-button-success\" onClick={onSubmitDelete} />\r\n        </Fragment>\r\n    );\r\n\r\n    const hideUpdateUserDialog = () => {\r\n        dispatch(removeSeletedUser());\r\n        reset3();\r\n        setUpdateUserDialog(false);\r\n    }\r\n\r\n    const updateUserDialogFooter = (\r\n        <Fragment>\r\n            <Button type=\"button\" label=\"No\" icon=\"pi pi-times\" className=\"p-button-outlined p-button-danger\" onClick={hideUpdateUserDialog} />\r\n            <Button type=\"submit\" label=\"Yes\" icon=\"pi pi-check\" className=\"p-button-outlined p-button-success\" autoFocus disabled={!isDirty3 || !isValid3} />\r\n        </Fragment>\r\n    );\r\n\r\n    const usernameBodyTemplate = (rowData) => {\r\n        return (\r\n            <Fragment>\r\n                <span className=\"p-column-title\">{t(\"getUsers.datatableSubtitle1\")}</span>\r\n                <span className=\"image-text\">{rowData.username}</span>\r\n            </Fragment>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <Toast ref={toast} />\r\n            <div id=\"features\" className=\"layout-features\">\r\n                <div className=\"features-topic-shadow\">\r\n                    <div className=\"features-topic\">{t('menuPrivate.managmentSubtitle1')}</div>\r\n                </div>\r\n                <div className=\"datatable-doc-demo\">\r\n                    <div className=\"card\">\r\n                        <Toolbar className=\"p-mb-4\" left={leftToolbarTemplate} right={rightToolbarTemplate}></Toolbar>\r\n                        <DataTable ref={dt} value={userFields} className=\"p-datatable-doc-demo p-datatable-gridlines p-datatable-striped\" loading={loading}\r\n                            dataKey=\"id\" paginator rows={10} rowsPerPageOptions={[5, 10, 25]}\r\n                            paginatorTemplate=\"FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink CurrentPageReport RowsPerPageDropdown\"\r\n                            currentPageReportTemplate={`${t(\"globalDatatable.content1\")} ` + \"{first} \" + ` ${t(\"globalDatatable.content2\")} ` + \"{last}\" +\r\n                                ` ${t(\"globalDatatable.content3\")} ` + \"{totalRecords}\" + ` ${t(\"getUsers.datatableContent1\")} ` + `${t(\"globalDatatable.content4\")} ` + \"{currentPage}/{totalPages}\"}\r\n                            globalFilter={globalFilter}\r\n                            header={header} emptyMessage={t(\"getUsers.datatableResponseTitle1\")}>\r\n                            <Column field=\"username\" filterField=\"username\" header={t(\"getUsers.datatableSubtitle1\")} body={usernameBodyTemplate} filter filterPlaceholder={t(\"getUsers.datatableFilterTitle1\")} filterMatchMode=\"contains\" sortable></Column>\r\n                            <Column body={actionBodyTemplate}></Column>\r\n                        </DataTable>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            {/* \"handleSubmit\" will validate your inputs before invoking \"onSubmit\" */}\r\n            <form onSubmit={handleSubmit2(onSubmitSignup)}>\r\n                <Dialog visible={signupUserDialog} style={{ width: '450px' }} header={t('globalDialog.Title')} modal className=\"p-fluid\" footer={signupUserDialogFooter} onHide={hideSignupUserDialog}>\r\n                    <Panel header={<h3>{t('signupPage.panelTitle')}</h3>}>\r\n                        <div className=\"p-grid p-fluid\">\r\n                            <div className=\"p-col-12\">\r\n                                <div className=\"p-field\">\r\n                                    <label htmlFor=\"username\" className=\"p-d-block\"><h5>{t('globalInput.usernameTitle2')}</h5></label>\r\n                                </div>\r\n                                <div className=\"p-inputgroup\">\r\n                                    <span className=\"p-inputgroup-addon\">\r\n                                        <i className=\"fa fa-fw fa-user\"></i>\r\n                                    </span>\r\n                                    <Controller\r\n                                        name=\"username\"\r\n                                        control={control2}\r\n                                        defaultValue={\"\"}\r\n                                        rules={{\r\n                                            required: true,\r\n                                            minLength: 3,\r\n                                            pattern: /^(?:[a-zA-Z'-.])+(?:[\\s][a-zA-Z'-.]+)*$/i\r\n                                        }}\r\n                                        render={({ field: { onChange, value } }) => <InputText type=\"text\"\r\n                                            className={`p-inputtext p-widget p-state-default p-corner-all ${errors2.username ? 'p-invalid' : ''}`}\r\n                                            onChange={onChange} value={value || \"\"} maxLength={20} placeholder={t(\"globalInput.usernameSubtitle1\")} />}\r\n                                    />\r\n                                </div>\r\n                                <small id=\"username1-help\" className={`${errors2.username ? 'p-error p-d-block' : ''}`}>{t(\"globalInputMsg.usernameTitle1\")}</small>\r\n                            </div >\r\n                            <div className=\"p-col-12\">\r\n                                <div className=\"p-field\">\r\n                                    <label htmlFor=\"password\" className=\"p-d-block\"><h5>{t('globalInput.passwordTitle2')}</h5></label>\r\n                                </div>\r\n                                <div className=\"p-inputgroup\">\r\n                                    <span className=\"p-inputgroup-addon\">\r\n                                        <i className=\"fa fa-fw fa-key\"></i>\r\n                                    </span>\r\n                                    <Controller\r\n                                        name=\"password\"\r\n                                        control={control2}\r\n                                        defaultValue={\"\"}\r\n                                        rules={{\r\n                                            required: true,\r\n                                            minLength: 8,\r\n                                            pattern: /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#\\$%\\^&\\*_])\\S*$/i\r\n                                        }}\r\n                                        render={({ field: { onChange, value } }) => <InputText type=\"text\"\r\n                                            style={{\r\n                                                textSecurity: `${passwordShown ? '' : 'disc'} `,\r\n                                                WebkitTextSecurity: `${passwordShown ? '' : 'disc'} `\r\n                                            }}\r\n                                            className={`p-inputtext p-widget p-state-default p-corner-all ${errors2.password ? 'p-invalid' : ''}`}\r\n                                            onChange={onChange} value={value || \"\"} maxLength={20}\r\n                                            placeholder={t('globalInput.passwordSubtitle1')}\r\n                                        />}\r\n                                    />\r\n                                    <span className=\"p-buttonset\">\r\n                                        <Button type=\"button\" label={passwordShown ? `${t(\"globalButton.isShowPassword1\")}` : `${t(\"globalButton.isShowPassword2\")}`} className=\"p-button-rounded p-button-secondary\"\r\n                                            icon={passwordShown ? \"fa fa-fw fa-eye\" : \"fa fa-fw fa-eye-slash\"} onClick={togglePasswordVisiblity} />\r\n                                    </span>\r\n                                </div>\r\n                                <small id=\"password1-help\" className={`${errors2.password ? 'p-error p-d-block' : ''}`}>{t(\"globalInputMsg.passwordTitle1\")}</small>\r\n                            </div>\r\n                            <div className=\"p-col-12\">\r\n                                <div className=\"p-field\">\r\n                                    <Controller\r\n                                        name=\"captchaSignupUser\"\r\n                                        control={control2}\r\n                                        defaultValue={\"\"}\r\n                                        rules={{ required: true }}\r\n                                        render={({ field: { onChange } }) => (\r\n                                            <ReCaptcha\r\n                                                id=\"captchaSignupUser\"\r\n                                                ref={recaptchaSignupUserRef}\r\n                                                sitekey={v2CheckboxReCaptchaSiteKey}\r\n                                                onErrored={error}\r\n                                                onChange={onChange}\r\n                                            />\r\n                                        )}\r\n                                    />\r\n                                    {/* use to announce the error message */}\r\n                                    {errors2.captchaSignupUser && errors2.captchaSignupUser.type === \"required\" && (\r\n                                        <small id=\"captchaSignupUser1-help\" className=\"p-error p-d-block\">{t(\"globalInputErrorMsg.captchaTitle1\")}</small>\r\n                                    )}\r\n                                </div>\r\n                            </div>\r\n                        </div >\r\n                    </Panel >\r\n                </Dialog >\r\n            </form >\r\n            {/* \"handleSubmit\" will validate your inputs before invoking \"onSubmit\" */}\r\n            <form onSubmit={handleSubmit3(onSubmitUpdate)}>\r\n                <Dialog visible={updateUserDialog} style={{ width: '450px' }} header={t('globalDialog.Title')} modal className=\"p-fluid\" footer={updateUserDialogFooter} onHide={hideUpdateUserDialog}>\r\n                    <Panel header={<h3>{t('updateUser.panelTitle2')}</h3>}>\r\n                        <div className=\"p-grid p-fluid\">\r\n                            <div className=\"p-col-12\">\r\n                                <div className=\"p-field\">\r\n                                    <label htmlFor=\"name\" className=\"p-d-block\"><h5>{t('globalInput.usernameTitle2')}</h5></label>\r\n                                </div>\r\n                                <div className=\"p-inputgroup\">\r\n                                    <span className=\"p-inputgroup-addon\">\r\n                                        <i className=\"fa fa-fw fa-user\"></i>\r\n                                    </span>\r\n                                    <Controller\r\n                                        name=\"selectedUsername\"\r\n                                        control={control3}\r\n                                        defaultValue={\"selectedUsername\"}\r\n                                        rules={{\r\n                                            required: true,\r\n                                            minLength: 3,\r\n                                            pattern: /^(?:[a-zA-Z'-.])+(?:[\\s][a-zA-Z'-.]+)*$/i\r\n                                        }}\r\n                                        render={({ field: { onChange, value } }) => <InputText type=\"text\"\r\n                                            className={`p-inputtext p-widget p-state-default p-corner-all ${errors3.selectedUsername ? 'p-invalid' : ''}`}\r\n                                            onChange={onChange} value={value || \"\"} maxLength={20} />}\r\n                                    />\r\n                                </div>\r\n                                <small id=\"username1-help\" className={`${errors3.selectedUsername ? 'p-error p-d-block' : ''}`}>{t(\"globalInputMsg.usernameTitle1\")}</small>\r\n                            </div>\r\n                        </div>\r\n                    </Panel>\r\n                </Dialog>\r\n            </form>\r\n            {/* \"handleSubmit\" will validate your inputs before invoking \"onSubmit\" */}\r\n            <form onSubmit={handleSubmit4(onSubmitDelete)}>\r\n                <Dialog visible={deleteUserDialog} style={{ width: '450px' }} header={t('globalDialog.Title')} modal footer={deleteUserDialogFooter} onHide={hideDeleteUserDialog}>\r\n                    <div className=\"confirmation-content\">\r\n                        <i className=\"pi pi-exclamation-triangle p-mr-3\" style={{ fontSize: '2rem' }} />\r\n                        <span>{t('deleteUser.dialogTitle1')}</span>\r\n                    </div>\r\n                </Dialog>\r\n            </form>\r\n        </Fragment >\r\n    );\r\n}\r\n\r\nexport default ProfilesAccounts;","import React, { useState, useEffect, useRef, useCallback, Fragment, Suspense, lazy } from 'react';\r\nimport AppFooter from '../AppFooter';\r\nimport ProfilesAccounts from '../components/managmentaccounts/ProfilesAccounts';\r\n\r\nconst ManagmentAccountsPage = () => {\r\n\r\n    return (\r\n        <Fragment>\r\n            <div className=\"layout-content-custom\">\r\n                <ProfilesAccounts />\r\n            </div>\r\n            <AppFooter />\r\n        </Fragment >\r\n    );\r\n}\r\n\r\nexport default ManagmentAccountsPage;"],"sourceRoot":""}