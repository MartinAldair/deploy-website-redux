{"version":3,"sources":["AppFooter.js","services/UserService.js","redux/actions/account.js","components/myaccount/ProfileAccount.js","pages/MyAccountPage.js"],"names":["AppFooter","history","useHistory","useTranslation","t","className","src","alt","type","label","onClick","push","API_URL","process","getUserById","userId","axios","get","getAllListOfDataUsersByRoleName","currentRole","removeSeletedUser","types","getListOfDataUserById","_userId","dispatch","UserService","then","response","status","user","userValue","data","id","username","catch","error","request","console","log","Promise","reject","message","config","messageToast","toast","severity","summary","detail","current","show","life","ProfileAccount","useDispatch","currentToken","useSelector","state","Authentication","token","tokenDecoded","jwt_decode","currentUserId","useForm","mode","control","register","handleSubmit","reset","setValue","watch","getValues","formState","errors","isDirty","isValid","isSubmitting","touchedFields","submitCount","dirtyFields","useRef","recaptchaUpdateUserRef","useState","updateUserDialog","setUpdateUserDialog","resetFiels","getListOfDataUser","useCallback","useEffect","undefined","onSubmitUpdate","e","a","executeAsync","recaptchaUpdateUserResponse","selectedUser","handleUpdateUser","hideUpdateUserDialog","updateUserDialogFooter","icon","autoFocus","ref","onSubmit","header","style","textAlign","htmlFor","name","defaultValue","rules","required","minLength","pattern","render","field","onChange","value","maxLength","disabled","sitekey","onErrored","alert","size","visible","width","modal","footer","onHide","MyAccountPage"],"mappings":"uLA0CeA,IAnCG,WAEd,IAAMC,EAAUC,cAEhB,EAAkBC,YAAe,UAAjC,mBAAOC,EAAP,UAEA,OACI,cAAC,WAAD,UACI,qBAAKC,UAAU,uBAAf,SACI,sBAAKA,UAAU,SAAf,UACI,qBAAKA,UAAU,kBAAf,SACI,qBAAKC,IAAI,2CAA2CC,IAAI,WAE5D,qBAAKF,UAAU,kBAAf,SACI,sBAAKA,UAAU,qBAAf,UACI,6BAAKD,EAAE,uBACP,+BACI,6BAAI,cAAC,SAAD,CAAQC,UAAU,SAAlB,SAA2B,mBAAGA,UAAU,uBAC5C,6BAAI,cAAC,SAAD,CAAQA,UAAU,SAAlB,SAA2B,mBAAGA,UAAU,6BAIxD,sBAAKA,UAAU,kBAAf,UACI,6BAAKD,EAAE,uBACP,+BACI,6BAAI,cAAC,SAAD,CAAQI,KAAK,SAASC,MAAOL,EAAE,wBAAyBC,UAAU,SAASK,QAAS,WAAQT,EAAQU,KAAK,UAC7G,6BAAI,cAAC,SAAD,CAAQH,KAAK,SAASC,MAAOL,EAAE,wBAAyBC,UAAU,SAASK,QAAS,WAAQT,EAAQU,KAAK,8B,iCCjCzI,qBACMC,EAAUC,mEAWD,KACXC,YAVgB,SAACC,GACjB,OAAOC,IACFC,IAAIL,EAAU,WAAaG,IAShCG,gCANoC,SAACC,GACrC,OAAOH,IAAMC,IAAIL,EAAU,c,oHCkBlBQ,EAAoB,iBAAO,CACpCZ,KAAMa,MAGGC,EAAwB,SAACC,GAAD,OAAa,SAACC,GAC/C,OAAOC,IAAYX,YAAYS,GAC1BG,MAAK,SAACC,GACUA,EAASC,OAAtB,IA9B0BC,EAgCpBC,EAAY,CACdf,OAAQY,EAASI,KAAKC,GACtBC,SAAUN,EAASI,KAAKE,UAG5B,OADAT,GApC0BK,EAoCKC,EApCK,CAC5CtB,KAAMa,IACNQ,KAAMA,KAmCSF,KAEVO,OAAM,SAACC,GACJ,GAAIA,EAAMR,SAAU,CAEHQ,EAAMR,SAASC,OAC5B,OAAOO,EAAMR,SACV,GAAIQ,EAAMC,QAIb,OADAC,QAAQC,IAAIH,EAAMC,SACXG,QAAQC,OAAOL,GAGtBE,QAAQC,IAAI,QAASH,EAAMM,SAE/BJ,QAAQC,IAAIH,EAAMO,a,8FCxCxBC,EAAe,SAACC,EAAOC,EAAUC,EAASC,GAC5CH,EAAMI,QAAQC,KAAK,CAAEJ,SAAUA,EAAUC,QAASA,EAASC,OAAQA,EAAQG,KAAM,OA4NtEC,EAzNQ,WAEnB,IAAM3B,EAAW4B,cACXnD,EAAUC,cAEhB,EAAkBC,YAAe,UAAjC,mBAAOC,EAAP,KAEeiD,GAFf,KAEgCC,aAAY,SAACC,GAAD,OAAWA,EAAMC,kBAArDC,OACFC,EAAeC,YAAWN,GAC1BO,EAAiC,OAAjBF,EAAwBA,EAAa1B,GAAK,IAGhE,EAUM6B,YAAQ,CAAEC,KAAM,aARlBC,GAFJ,EACIC,SADJ,EAEID,SACAE,EAHJ,EAGIA,aACAC,EAJJ,EAIIA,MAEAC,GANJ,EAKIC,MALJ,EAMID,UACAE,EAPJ,EAOIA,UAPJ,IASIC,UAAaC,EATjB,EASiBA,OAAQC,EATzB,EASyBA,QAASC,EATlC,EASkCA,QAI5B7B,GAbN,EAS2C8B,aAT3C,EASyDC,cATzD,EASwEC,YATxE,EASqFC,YAIvEC,iBAAO,OACfC,EAAyBD,mBAC/B,EAAgDE,oBAAS,GAAzD,mBAAOC,EAAP,KAAyBC,EAAzB,KAMMC,EAAa,WACfJ,EAAuB/B,QAAQkB,SAG7BkB,EAAoBC,uBAAY,WAClC7D,EAASF,EAAsBsC,IAC1BlC,MAAK,SAACC,GACH,GAAIA,EAASC,QAAU,KAAOD,EAASC,OAAS,IAC5CsC,EAAM,CACFlC,GAAIL,EAASI,KAAKC,GAClBC,SAAUN,EAASI,KAAKE,WAE5BkC,EAAS,qBAAsBxC,EAASI,KAAKE,eAE7C,OAAQN,EAASC,QACb,KAAK,IACDe,EAAaC,EAAO,QAAR,UAAoBxC,EAAE,sCAAtB,UAAiEA,EAAE,yCAO9F8B,OAAM,WACHG,QAAQC,IAAI,sEAErB,CAACM,EAAOgB,EAAeM,IAI1BoB,qBAAU,WAEgB,OAAlB1B,QAA4C2B,IAAlB3B,EAC1B3D,EAAQU,KAAK,UAEbyE,MAEL,CAACA,IAIJ,IAAMI,EAAc,uCAAG,WAAOzD,EAAM0D,GAAb,mBAAAC,EAAA,sEACuBX,EAAuB/B,QAAQ2C,eADtD,OACbC,EADa,OAEb7E,EAASgB,EAAKC,GACdC,EAAWF,EAAKE,SAKtBT,GDjFoBK,EC6EF,CACdd,OAAQA,EACRkB,SAAUA,GD/EgB,CAClCzB,KAAMa,IACNwE,aAAchE,KCgFViE,EAAiBF,EAA6B7D,EAAMhB,GATjC,iCDzEA,IAACc,ICyED,OAAH,wDAYdiE,EAAmB,SAACF,EAA6B7D,EAAMhB,GACzD,ID/FiCc,EC+F3BI,EAAWF,EAAKE,SAQtB,OALIA,IAFuBoC,EAAU,uBAQjC,KAAK,EACDc,IACAjB,EAAM,CACFlC,GAAIjB,EACJkB,SAAUA,IAEdkC,EAAS,qBAAsBlC,GAC/B,IAAMH,EAAY,CACdf,OAAQA,EACRkB,SAAUA,GAEdT,EAASJ,KACTI,GDpHyBK,ECoHSC,EDpHC,CAC/CtB,KAAMa,IACNQ,KAAM,CAACA,MCmHKc,EAAaC,EAAO,UAAR,UAAsBxC,EAAE,yCAAxB,UAAsEA,EAAE,0CACpF8E,GAAoB,GACpB,MACJ,KAAK,EACDC,IACAjB,IACAC,EAAS,qBAAsBlC,GAC/BT,EAASJ,KACTI,EDxH+B,CAC3ChB,KAAMa,MCwHMsB,EAAaC,EAAO,QAAR,UAAoBxC,EAAE,sCAAtB,UAAiEA,EAAE,wCAC/E8E,GAAoB,KAW1Ba,EAAuB,WACzBb,GAAoB,IAGlBc,EACF,eAAC,WAAD,WACI,cAAC,SAAD,CAAQxF,KAAK,SAASC,MAAOL,EAAE,6BAA8B6F,KAAK,cAAc5F,UAAU,oCAAoCK,QAAS,kBAAMqF,OAC7I,cAAC,SAAD,CAAQvF,KAAK,SAASC,MAAOL,EAAE,6BAA8B6F,KAAK,cAAc5F,UAAU,qCAAqC6F,WAAS,OAIhJ,OACI,eAAC,WAAD,WACI,cAAC,QAAD,CAAOC,IAAKvD,IACZ,qBAAKvC,UAAU,wBAAf,SAEI,uBAAM+F,SAAUnC,EAAauB,GAA7B,UACI,sBAAKxD,GAAG,WAAW3B,UAAU,kBAA7B,UACI,qBAAKA,UAAU,wBAAf,SACI,qBAAKA,UAAU,iBAAf,SAAiCD,EAAE,kCAEvC,qBAAKC,UAAU,SAAf,SACI,qBAAKA,UAAU,WAAf,SACI,qBAAKA,UAAU,OAAf,SACI,eAAC,QAAD,CAAOgG,OAAQ,6BAAKjG,EAAE,4BAAtB,UACI,qBAAKC,UAAU,SAAf,SACI,qBAAKA,UAAU,WAAWiG,MAAO,CAAEC,UAAW,UAA9C,SACI,6BAAKnG,EAAE,kCAGf,qBAAKC,UAAU,SAAf,SACI,sBAAKA,UAAU,kBAAf,UACI,qBAAKA,UAAU,UAAf,SACI,uBAAOmG,QAAQ,WAAWnG,UAAU,YAApC,SAAgD,6BAAKD,EAAE,oCAE3D,sBAAKC,UAAU,eAAf,UACI,sBAAMA,UAAU,qBAAhB,SACI,mBAAGA,UAAU,uBAEjB,cAAC,IAAD,CACIoG,KAAK,WACL1C,QAASA,EACT2C,aAAc,GACdC,MAAO,CACHC,UAAU,EACVC,UAAW,EACXC,QAAS,4CAEbC,OAAQ,oBAAGC,MAASC,EAAZ,EAAYA,SAAUC,EAAtB,EAAsBA,MAAtB,OACJ,cAAC,YAAD,CAAW1G,KAAK,OAAOH,UAAS,4DAAuDkE,EAAOtC,SAAW,YAAc,IACnHgF,SAAUA,EAAUC,MAAOA,GAAS,GAAIC,UAAW,WAKnE,uBAAOnF,GAAG,iBAAiB3B,UAAS,UAAKkE,EAAOtC,SAAW,oBAAsB,IAAjF,SAAwF7B,EAAE,wCAGlG,uBACA,qBAAKC,UAAU,SAAf,SACI,qBAAKA,UAAU,WAAWiG,MAAO,CAAEC,UAAW,SAA9C,SACI,cAAC,SAAD,CAAQ/F,KAAK,SAASyF,KAAK,cAAcxF,MAAOL,EAAE,6BAA8BC,UAAU,kCAAkCK,QAjE3I,WACzBwE,GAAoB,IAgE+KkC,UAAW5C,IAAYC,oBAQ9M,cAAC,IAAD,CACIzC,GAAG,oBACHmE,IAAKpB,EACLsC,QAhNW,2CAiNXC,UA9KN,SAACJ,GACXK,MAAML,IA8KUM,KAAK,cAET,cAAC,SAAD,CAAQxF,GAAG,kBAAkByF,QAASxC,EAAkBqB,MAAO,CAAEoB,MAAO,SAAWrB,OAAQjG,EAAE,sBAAuBuH,OAAK,EAACtH,UAAU,UAAUuH,OAAQ5B,EAAwB6B,OAAQ9B,EAAtL,SACI,qBAAK1F,UAAU,WAAWiG,MAAO,CAAEC,UAAW,UAA9C,SACI,6BAAKnG,EAAE,yCCrNpB0H,UAZO,WAElB,OACI,eAAC,WAAD,WACI,qBAAKzH,UAAU,wBAAf,SACI,cAAC,EAAD,MAEJ,cAACL,EAAA,EAAD","file":"static/js/11.986746de.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef, useCallback, Fragment, Suspense, lazy } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\n// import hook for translations and i18n configuration file\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nimport { Button } from 'primereact/button';\r\n\r\nconst AppFooter = () => {\r\n\r\n    const history = useHistory();\r\n    // destructuring t() function for useTranslation()\r\n    const [t, i18n] = useTranslation('common');\r\n\r\n    return (\r\n        <Fragment>\r\n            <div className=\"layout-footer-custom\">\r\n                <div className=\"p-grid\">\r\n                    <div className=\"p-col-12 p-lg-4\">\r\n                        <img src=\"assets/layout/images/logo-roma-white.svg\" alt=\"logo\" />\r\n                    </div>\r\n                    <div className=\"p-col-12 p-lg-4\">\r\n                        <div className=\"footer-text-center\">\r\n                            <h4>{t(\"footerPage.title1\")}</h4>\r\n                            <ul>\r\n                                <li><Button className=\"p-link\"><i className=\"pi pi-facebook\"></i></Button></li>\r\n                                <li><Button className=\"p-link\"><i className=\"pi pi-github\"></i></Button></li>\r\n                            </ul>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"p-col-12 p-lg-4\">\r\n                        <h4>{t(\"footerPage.title2\")}</h4>\r\n                        <ul>\r\n                            <li><Button type=\"button\" label={t(\"footerPage.subTitle1\")} className=\"p-link\" onClick={() => { history.push('/') }} /></li>\r\n                            <li><Button type=\"button\" label={t(\"footerPage.subTitle2\")} className=\"p-link\" onClick={() => { history.push('/about') }} /></li>\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nexport default AppFooter;","import axios from \"axios\";\r\nconst API_URL = process.env.REACT_APP_API_URL;\r\n\r\nconst getUserById = (userId) => {\r\n    return axios\r\n        .get(API_URL + \"account/\" + userId);\r\n}\r\n\r\nconst getAllListOfDataUsersByRoleName = (currentRole) => {\r\n    return axios.get(API_URL + \"account\");\r\n}\r\n\r\nexport default {\r\n    getUserById,\r\n    getAllListOfDataUsersByRoleName\r\n};","import * as types from \"./types\";\r\n\r\nimport UserService from \"../../services/UserService\";\r\n\r\nexport const getCatalogUserSuccess = (user) => ({\r\n    type: types.GET_CATALOG_USER_SUCCESS,\r\n    user: user\r\n})\r\n\r\nexport const getCatalogUserFailure = () => ({\r\n    type: types.GET_CATALOG_USER_FAILURE\r\n})\r\n\r\nexport const updateCatalogUserSuccess = (user) => ({\r\n    type: types.UPDATE_CATALOG_USER_SUCCESS,\r\n    user: [user]\r\n})\r\n\r\nexport const updateCatalogUserFailure = () => ({\r\n    type: types.UPDATE_CATALOG_USER_FAILURE\r\n})\r\n\r\nexport const seletedUser = (user) => ({\r\n    type: types.SELECTED_USER,\r\n    selectedUser: user\r\n})\r\n\r\nexport const removeSeletedUser = () => ({\r\n    type: types.REMOVE_SELECTED_USER\r\n})\r\n\r\nexport const getListOfDataUserById = (_userId) => (dispatch) => {\r\n    return UserService.getUserById(_userId)\r\n        .then((response) => {\r\n            const code = response.status;\r\n            // setup specific values from array\r\n            const userValue = {\r\n                userId: response.data.id,\r\n                username: response.data.username\r\n            }\r\n            dispatch(getCatalogUserSuccess(userValue));\r\n            return response;\r\n        })\r\n        .catch((error) => { /* Handling Axios error in React */\r\n            if (error.response) {\r\n                // The request was made and the server responded with a status code\r\n                const code = error.response.status;\r\n                return error.response;\r\n            } else if (error.request) {\r\n                // The request was made but no response was received `error.request` is an instance of XMLHttpRequest in the browser \r\n                // and an instance of http.ClientRequest in node.js\r\n                console.log(error.request);\r\n                return Promise.reject(error);\r\n            } else {\r\n                // Something happened in setting up the request that triggered an Error\r\n                console.log('Error', error.message);\r\n            }\r\n            console.log(error.config);\r\n        })\r\n}","import React, { useState, useEffect, useRef, useCallback, Fragment, Suspense, lazy } from 'react';\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getListOfDataUserById, seletedUser, removeSeletedUser, updateCatalogUserSuccess, updateCatalogUserFailure } from \"../../redux/actions/account\";\r\nimport { useHistory } from 'react-router-dom';\r\n// import hook for translations and i18n configuration file\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useForm, Controller } from 'react-hook-form';\r\nimport jwt_decode from \"jwt-decode\";\r\nimport ReCaptcha from \"react-google-recaptcha\";\r\nimport { Button } from \"primereact/button\";\r\nimport { Dialog } from 'primereact/dialog';\r\nimport { InputText } from \"primereact/inputtext\";\r\nimport { Toast } from \"primereact/toast\";\r\nimport { Panel } from 'primereact/panel';\r\n\r\nconst v2CheckboxReCaptchaSiteKey = \"6LeIxAcTAAAAAJcZVRqyHh71UMIEGNQ_MXjiZKhI\";\r\n\r\nconst messageToast = (toast, severity, summary, detail) => {\r\n    toast.current.show({ severity: severity, summary: summary, detail: detail, life: 3000 });\r\n}\r\n\r\nconst ProfileAccount = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    // destructuring t() function for useTranslation()\r\n    const [t, i18n] = useTranslation('common');\r\n\r\n    const { token: currentToken } = useSelector((state) => state.Authentication);\r\n    const tokenDecoded = jwt_decode(currentToken);\r\n    const currentUserId = tokenDecoded !== null ? tokenDecoded.id : \"0\";\r\n\r\n    /* functions to build form returned by useForm() hook */\r\n    const {\r\n        register,\r\n        control,\r\n        handleSubmit,\r\n        reset,\r\n        watch,\r\n        setValue,\r\n        getValues,\r\n        // Read the formState before render to subscribe the form state through the Proxy\r\n        formState: { errors, isDirty, isValid, isSubmitting, touchedFields, submitCount, dirtyFields } }\r\n        = useForm({ mode: \"onChange\" });\r\n\r\n    /* Initialize state to hold */\r\n    const toast = useRef(null);\r\n    const recaptchaUpdateUserRef = useRef();\r\n    const [updateUserDialog, setUpdateUserDialog] = useState(false);\r\n\r\n    const error = (value) => {\r\n        alert(value);\r\n    }\r\n\r\n    const resetFiels = () => {\r\n        recaptchaUpdateUserRef.current.reset();\r\n    }\r\n\r\n    const getListOfDataUser = useCallback(() => {\r\n        dispatch(getListOfDataUserById(currentUserId))\r\n            .then((response) => {\r\n                if (response.status >= 200 && response.status < 300) {\r\n                    reset({\r\n                        id: response.data.id,\r\n                        username: response.data.username\r\n                    });\r\n                    setValue(\"auxCurrentUsername\", response.data.username);\r\n                } else {\r\n                    switch (response.status) {\r\n                        case 404:\r\n                            messageToast(toast, 'error', `${t(\"globalErrorMsg.errorMessageTitle1\")}`, `${t(\"getUser.error404MessageSubtitle\")}`);\r\n                            break;\r\n                        default:\r\n                        // do nothing\r\n                    }\r\n                }\r\n            })\r\n            .catch(() => {\r\n                console.log('No internet connection found. App is running in offline mode.');\r\n            })\r\n    }, [toast, currentUserId, reset])\r\n\r\n    /* This is a special method for the implementation of this project */\r\n    /* Currently method is only running the effect once when the page loads */\r\n    useEffect(() => {\r\n        // first time to fetch data\r\n        if (currentUserId === null || currentUserId === undefined) {\r\n            history.push('/error');\r\n        } else {\r\n            getListOfDataUser();\r\n        }\r\n    }, [getListOfDataUser]);\r\n\r\n    /* This is a special method for the implementation of this project */\r\n    /* Currently method is fake update for user */\r\n    const onSubmitUpdate = async (data, e) => {\r\n        const recaptchaUpdateUserResponse = await recaptchaUpdateUserRef.current.executeAsync();\r\n        const userId = data.id;\r\n        const username = data.username;\r\n        const userValue = {\r\n            userId: userId,\r\n            username: username\r\n        }\r\n        dispatch(seletedUser(userValue));\r\n        handleUpdateUser(recaptchaUpdateUserResponse, data, userId);\r\n    }\r\n\r\n    const handleUpdateUser = (recaptchaUpdateUserResponse, data, userId) => {\r\n        const username = data.username;\r\n        const auxCurrentUsername = getValues(\"auxCurrentUsername\");\r\n        let isValid;\r\n        if (username !== auxCurrentUsername) {\r\n            isValid = true;\r\n        } else {\r\n            isValid = false;\r\n        }\r\n        switch (isValid) {\r\n            case true:\r\n                resetFiels();\r\n                reset({\r\n                    id: userId,\r\n                    username: username\r\n                });\r\n                setValue(\"auxCurrentUsername\", username);\r\n                const userValue = {\r\n                    userId: userId,\r\n                    username: username\r\n                }\r\n                dispatch(removeSeletedUser());\r\n                dispatch(updateCatalogUserSuccess(userValue));\r\n                messageToast(toast, \"success\", `${t(\"globalSuccessMsg.successMessageTitle\")}`, `${t(\"updateUser.success202MessageSubtitle\")}`);\r\n                setUpdateUserDialog(false);\r\n                break;\r\n            case false:\r\n                resetFiels();\r\n                reset();\r\n                setValue(\"auxCurrentUsername\", username);\r\n                dispatch(removeSeletedUser());\r\n                dispatch(updateCatalogUserFailure());\r\n                messageToast(toast, 'error', `${t(\"globalErrorMsg.errorMessageTitle1\")}`, `${t(\"updateUser.error403MessageSubtitle\")}`);\r\n                setUpdateUserDialog(false);\r\n                break;\r\n            default:\r\n            // do nothing\r\n        }\r\n    }\r\n\r\n    const openUpdateUserDialog = () => {\r\n        setUpdateUserDialog(true);\r\n    }\r\n\r\n    const hideUpdateUserDialog = () => {\r\n        setUpdateUserDialog(false);\r\n    }\r\n\r\n    const updateUserDialogFooter = (\r\n        <Fragment>\r\n            <Button type=\"button\" label={t(\"globalButton.cancelTitle1\")} icon=\"pi pi-times\" className=\"p-button-outlined p-button-danger\" onClick={() => hideUpdateUserDialog()} />\r\n            <Button type=\"submit\" label={t(\"globalButton.acceptTitle1\")} icon=\"pi pi-check\" className=\"p-button-outlined p-button-success\" autoFocus />\r\n        </Fragment>\r\n    )\r\n\r\n    return (\r\n        <Fragment>\r\n            <Toast ref={toast} />\r\n            <div className=\"layout-content-custom\">\r\n                {/* \"handleSubmit\" will validate your inputs before invoking \"onSubmit\" */}\r\n                <form onSubmit={handleSubmit(onSubmitUpdate)}>\r\n                    <div id=\"features\" className=\"layout-features\">\r\n                        <div className=\"features-topic-shadow\">\r\n                            <div className=\"features-topic\">{t('menuPrivate.pagesSubtitle1')}</div>\r\n                        </div>\r\n                        <div className=\"p-grid\">\r\n                            <div className=\"p-col-12\">\r\n                                <div className=\"card\">\r\n                                    <Panel header={<h2>{t(\"updateUser.panelTitle1\")}</h2>}>\r\n                                        <div className=\"p-grid\">\r\n                                            <div className=\"p-col-12\" style={{ textAlign: 'center' }}>\r\n                                                <h3>{t(\"updateUser.panelSubtitle\")}</h3>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div className=\"p-grid\">\r\n                                            <div className=\"p-col-12 p-md-6\">\r\n                                                <div className=\"p-field\">\r\n                                                    <label htmlFor=\"username\" className=\"p-d-block\"><h5>{t('globalInput.usernameTitle2')}</h5></label>\r\n                                                </div>\r\n                                                <div className=\"p-inputgroup\">\r\n                                                    <span className=\"p-inputgroup-addon\">\r\n                                                        <i className=\"fa fa-fw fa-user\"></i>\r\n                                                    </span>\r\n                                                    <Controller\r\n                                                        name=\"username\"\r\n                                                        control={control}\r\n                                                        defaultValue={\"\"}\r\n                                                        rules={{\r\n                                                            required: true,\r\n                                                            minLength: 3,\r\n                                                            pattern: /^(?:[a-zA-Z'-.])+(?:[\\s][a-zA-Z'-.]+)*$/i\r\n                                                        }}\r\n                                                        render={({ field: { onChange, value } }) => (\r\n                                                            <InputText type=\"text\" className={`p-inputtext p-widget p-state-default p-corner-all ${errors.username ? 'p-invalid' : ''}`}\r\n                                                                onChange={onChange} value={value || \"\"} maxLength={20}\r\n                                                            />\r\n                                                        )}\r\n                                                    />\r\n                                                </div>\r\n                                                <small id=\"username1-help\" className={`${errors.username ? 'p-error p-d-block' : ''}`}>{t(\"globalInputMsg.usernameTitle1\")}</small>\r\n                                            </div>\r\n                                        </div>\r\n                                        <br />\r\n                                        <div className=\"p-grid\">\r\n                                            <div className=\"p-col-12\" style={{ textAlign: 'right' }}>\r\n                                                <Button type=\"button\" icon=\"pi pi-check\" label={t('globalButton.acceptTitle2')} className=\"p-button-outlined p-mr-2 p-mb-2\" onClick={openUpdateUserDialog} disabled={!isDirty || !isValid} />\r\n                                            </div>\r\n                                        </div>\r\n                                    </Panel>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <ReCaptcha\r\n                        id=\"captchaUpdateUser\"\r\n                        ref={recaptchaUpdateUserRef}\r\n                        sitekey={v2CheckboxReCaptchaSiteKey}\r\n                        onErrored={error}\r\n                        size=\"invisible\"\r\n                    />\r\n                    <Dialog id=\"dlgConfirmation\" visible={updateUserDialog} style={{ width: '450px' }} header={t(\"globalDialog.Title\")} modal className=\"p-fluid\" footer={updateUserDialogFooter} onHide={hideUpdateUserDialog}>\r\n                        <div className=\"p-col-12\" style={{ textAlign: 'center' }}>\r\n                            <h4>{t(\"updateUser.dialogTitle\")}</h4>\r\n                        </div>\r\n                    </Dialog>\r\n                </form>\r\n            </div>\r\n        </Fragment >\r\n    );\r\n}\r\n\r\nexport default ProfileAccount;","import React, { useState, useEffect, useRef, useCallback, Fragment, Suspense, lazy } from 'react';\r\nimport AppFooter from '../AppFooter';\r\nimport ProfileAccount from '../components/myaccount/ProfileAccount';\r\n\r\nconst MyAccountPage = () => {\r\n\r\n    return (\r\n        <Fragment>\r\n            <div className=\"layout-content-custom\">\r\n                <ProfileAccount />\r\n            </div>\r\n            <AppFooter />\r\n        </Fragment >\r\n    );\r\n}\r\n\r\nexport default MyAccountPage;"],"sourceRoot":""}